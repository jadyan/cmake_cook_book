#首先，设置了CMake最低版本、项目名称和支持的语言:
cmake_minimum_required(VERSION 2.6 FATAL_ERROR)
project(recipe-02 LANGUAGES CXX)

#定义可执行文件及其对应的源文件
add_executable(hello-world hello-world.cpp)



#通过使用target_compile_definition在预处理阶段使用。可以不重复if-endif语句，
#以更紧凑的表达式实现，我们将在下一个示例中演示这种重构方式。也可以把if-endif语句加入到一个if-else-else-endif语句中。
#这个阶段，可以使用add_definitions(-DIS_LINUX)来设置定义(当然，可以根据平台调整定义)，
#而不是使用target_compile_definition。使用add_definitions的缺点是，会修改编译整个项目的定义，而target_compile_definitions给我们机会，
#将定义限制于一个特定的目标，以及通过PRIVATE|PUBLIC|INTERFACE限定符，限制这些定义可见性。第1章的第8节，对这些限定符有详细的说明:


#PRIVATE，编译定义将只应用于给定的目标，而不应用于相关的其他目标。
#INTERFACE，对给定目标的编译定义将只应用于使用它的目标。
#PUBLIC，编译定义将应用于给定的目标和使用它的所有其他目标。
#NOTE:将项目中的源代码与平台相关性最小化，可使移植更加容易。



#通过定义以下目标编译定义，让预处理器知道系统名称:
if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
  target_compile_definitions(hello-world PUBLIC "IS_LINUX")
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  target_compile_definitions(hello-world PUBLIC "IS_MACOS")
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
  target_compile_definitions(hello-world PUBLIC "IS_WINDOWS")
endif()
